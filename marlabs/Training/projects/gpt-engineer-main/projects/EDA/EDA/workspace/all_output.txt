Given the task, we will need the following core classes, functions, and methods:

1. `CSVLoader`: A class to load and validate the CSV file.
2. `EDA`: A class to perform the Exploratory Data Analysis.
3. `StreamlitApp`: A class to handle the Streamlit interface and display the results of the EDA.

The `CSVLoader` class will need the following methods:

1. `load_csv`: To load the CSV file.
2. `validate_csv`: To validate the CSV file.

The `EDA` class will need the following methods:

1. `calculate_statistics`: To calculate basic statistical measures.
2. `generate_visualizations`: To generate visualizations of the data.

The `StreamlitApp` class will need the following methods:

1. `display_statistics`: To display the statistical measures on the Streamlit page.
2. `display_visualizations`: To display the visualizations on the Streamlit page.

Now, let's write the code for each of these classes and methods.

First, we will need to install the necessary Python packages. This can be done by creating a `requirements.txt` file with the following content:

requirements.txt
```txt
streamlit
pandas
numpy
matplotlib
seaborn
```

Next, we will create the `CSVLoader` class:

csv_loader.py
```python
import pandas as pd

class CSVLoader:
    def __init__(self, file_path):
        self.file_path = file_path

    def load_csv(self):
        try:
            self.data = pd.read_csv(self.file_path)
        except Exception as e:
            print(f"Error loading CSV file: {e}")
            self.data = None

    def validate_csv(self):
        if self.data is not None:
            # Perform any necessary validation on the data
            pass
```

Next, we will create the `EDA` class:

eda.py
```python
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

class EDA:
    def __init__(self, data):
        self.data = data

    def calculate_statistics(self):
        self.statistics = self.data.describe()

    def generate_visualizations(self):
        # Generate visualizations based on the data
        pass
```

Finally, we will create the `StreamlitApp` class:

streamlit_app.py
```python
import streamlit as st
from csv_loader import CSVLoader
from eda import EDA

class StreamlitApp:
    def __init__(self, file_path):
        self.file_path = file_path
        self.loader = CSVLoader(self.file_path)
        self.loader.load_csv()
        self.loader.validate_csv()
        self.eda = EDA(self.loader.data)

    def display_statistics(self):
        st.write(self.eda.statistics)

    def display_visualizations(self):
        # Display the visualizations generated by the EDA
        pass

    def run(self):
        self.eda.calculate_statistics()
        self.display_statistics()
        self.eda.generate_visualizations()
        self.display_visualizations()
```

The entry point of the application will be a script that creates an instance of the `StreamlitApp` class and calls its `run` method:

main.py
```python
from streamlit_app import StreamlitApp

if __name__ == "__main__":
    app = StreamlitApp("path_to_csv_file.csv")
    app.run()
```

To run the application, you would execute the `main.py` script.